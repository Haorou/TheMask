package com.dimosoftware.devplugin.servlets;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;

import com.dimosoftware.qrcode.components.QRCodeComponent;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.yellowbox.plugin.notification.INotifUser;
import com.yellowbox.plugin.service.IMailService;
import com.yellowbox.plugin.v3.ParamValues;
import com.yellowbox.plugin.v3.Servlet;
import com.yellowbox.plugin.v3.YellowboxEntryPoint;
import com.yellowbox.ws.beans.Record;
import com.yellowbox.ws.beans.Value;

public class QRCodeServlet extends Servlet 
{
	QRCodeComponent qRCodeComponent;
    YellowboxEntryPoint ybEntryPoint;
    IMailService mailService;
    INotifUser notifUser;

	String idCurrentFiche;
    Record currentRecord;
	List<Value> valuesCurrentFiche;
	int sizeValuesCurrentFiche;
	
	String idFields;
	List<String> list_idField;

	String idElementContact;
	String idQrCodeContenuField;
	String idQrCodeByteArrayField;
	
	@Override
	public String call(ParamValues paramsServlet) 
	{
		// Variable permettant de recuperer les valeurs parametres (entre autres)
		qRCodeComponent = (QRCodeComponent) getComponent(); 
		
		// Variable relatifs aux differents services utilises
		ybEntryPoint = getYellowboxEntryPoint(); 
		notifUser = ybEntryPoint.getNotification();
		mailService = ybEntryPoint.getServices().getMailService();
		
		// Recuperation de l'Id de la fiche courante et des valeurs de l'enregistrement
		idCurrentFiche = getYellowboxEntryPoint().get("REF_FICHE").toString();
		// Recuperation de l'enregistrement courant (la fiche sur laquelle se trouve l'utilisateur)
		currentRecord = getYellowboxEntryPoint().getServices().getRecordService().getRecordFromId(idCurrentFiche);
		// Une Value contient, entre autre, l'Id du champ, son nom et sa valeur
		valuesCurrentFiche = currentRecord.getValues();
		// Comment on va avoir besoin d'utiliser des boucles for pour visiter les valeurs, 
		// on recupere la taille une seule fois ici
		sizeValuesCurrentFiche = valuesCurrentFiche.size();

		// Recuperation de toutes les IdFields dans un String [Separation de chaque IdFied dans une List]
		idFields = qRCodeComponent.getParamValues().getStringValue("ybFields"); 
		list_idField = new ArrayList<String>() {{add(idFields); }};
		
		idQrCodeContenuField = qRCodeComponent.getParamValues().getStringValue("ybQrCodeContenuField");
		idQrCodeByteArrayField = qRCodeComponent.getParamValues().getStringValue("ybQrCodeByteArrayField");
		
		
		// Recuperation de la chaine de caracteres envoyee par le JS
		String typeOperation = paramsServlet.getStringValue("typeOperation");
		
		String varReturn = "";
		if(typeOperation.equals("generateQrCode"))
		{
			String QrCodeInfos = GetQrCodeInfos();
			WriteQRCodeContenuAndByteArrayInYb(QrCodeInfos);
		}
		else if(typeOperation.equals("checkIfQrCodeExist"))
		{
			for(int i = 0; i < sizeValuesCurrentFiche; i++)
			{
				if(valuesCurrentFiche.get(i).getField().getId().equals(idQrCodeContenuField)) 
				{
					Value valueQrCodeContenu = valuesCurrentFiche.get(i);
					if(valueQrCodeContenu.getValue().equals(""))
					{
						varReturn = "QrCodeNotExist";
					}
					else
					{
						varReturn = valueQrCodeContenu.getValue();					
					}
				}
			}
		}

		return varReturn;
	}
	
	@Override
	public String getName() {
		return "QRCodeServlet";
	}
	
	public String GetQrCodeInfos()
	{
		String qrCodeContenu = "";		
		for(int i = 0; i < sizeValuesCurrentFiche; i++)
		{
			for(String idField : list_idField)
			{
				if(valuesCurrentFiche.get(i).getField().getId().equals(idField))
				{
					qrCodeContenu += valuesCurrentFiche.get(i).getField().getName();
					qrCodeContenu += " : " + valuesCurrentFiche.get(i).getValue();			
				}
			}
		}
		return qrCodeContenu;
	}
	
	public void WriteQRCodeContenuAndByteArrayInYb(String QrCodeData)
	{	
		for(int i = 0; i < sizeValuesCurrentFiche; i++)
		{
			if(valuesCurrentFiche.get(i).getField().getId().equals(idQrCodeByteArrayField)) 
			{
				Value valueQrCodeByteArray = valuesCurrentFiche.get(i);
				valueQrCodeByteArray.setValue(GenerateByteArrayQRCode(QrCodeData));
				valuesCurrentFiche.set(i, valueQrCodeByteArray);
			}
			else if(valuesCurrentFiche.get(i).getField().getId().equals(idQrCodeContenuField))
			{
				Value valueQrCodeContenu = valuesCurrentFiche.get(i);
				valueQrCodeContenu.setValue(QrCodeData);
				valuesCurrentFiche.set(i, valueQrCodeContenu);
			}
		}
		
		currentRecord.setValues(valuesCurrentFiche);
		getYellowboxEntryPoint().getServices().getRecordService().createOrUpdate(currentRecord);
	}
	
	public String GenerateByteArrayQRCode(String data) 
	{
        int size = 400;

        // encode
        BitMatrix bitMatrix = null;
		try 
		{
			bitMatrix = generateMatrix(data, size);
		} 
		catch (WriterException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		BufferedImage bImageQrCode = MatrixToImageWriter.toBufferedImage(bitMatrix);
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
	    
		try {
			ImageIO.write(bImageQrCode, "jpg", bos );
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		byte[] byteArray = bos.toByteArray();
		int sizeByteArray = byteArray.length;
		int indexToFoget = sizeByteArray - 1;
		
		String stringByteArray= "[";
		for(int i = 0; i < sizeByteArray; i++)
		{
			stringByteArray += byteArray[i];
			if(i != indexToFoget)
			{
				stringByteArray += ",";
			}
		}
		stringByteArray += "]";
		
	    return stringByteArray;
	}

	private static BitMatrix generateMatrix(String data, int size) throws WriterException 
    {
        BitMatrix bitMatrix = new QRCodeWriter().encode(data, BarcodeFormat.QR_CODE, size, size);
        return bitMatrix;
    }
}
