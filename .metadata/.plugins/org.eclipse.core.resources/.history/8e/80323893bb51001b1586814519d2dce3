package com.dimosoftware.qrcode.servlets;

import java.text.Normalizer;
import java.util.List;

import com.dimosoftware.qrcode.components.QRCodeComponent;
import com.yellowbox.plugin.notification.INotifUser;
import com.yellowbox.plugin.v3.ParamValues;
import com.yellowbox.plugin.v3.Servlet;
import com.yellowbox.plugin.v3.YellowboxEntryPoint;
import com.yellowbox.ws.beans.Record;
import com.yellowbox.ws.beans.Value;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class QRCodeServlet extends Servlet 
{
	QRCodeComponent qRCodeComponent;
    YellowboxEntryPoint ybEntryPoint;
    INotifUser notifUser;

	String idCurrentFiche;
    Record currentRecord;
    String infosFields;
	List<Value> valuesCurrentFiche;
	int sizeValuesCurrentFiche;
	
	String idFields;
	String[] array_idField;

	String idQrCodeImgHtmlField;
	
	@Override
	public String call(ParamValues paramsServlet) 
	{
		// Variable permettant de recuperer les valeurs parametres (entre autres)
		qRCodeComponent = (QRCodeComponent) getComponent(); 
		
		// Variable relatifs aux differents services utilises
		ybEntryPoint = getYellowboxEntryPoint(); 
		notifUser = ybEntryPoint.getNotification();
		
		// Recuperation de l'Id de la fiche courante et des valeurs de l'enregistrement
		idCurrentFiche = getYellowboxEntryPoint().get("REF_FICHE").toString();
		
		// Recuperation de l'enregistrement courant (la fiche sur laquelle se trouve l'utilisateur)
		currentRecord = getYellowboxEntryPoint().getServices().getRecordService().getRecordFromId(idCurrentFiche);

		// Recuperation des valeurs 
		// Une Value contient, entre autre, l'Id du champ, son nom et sa valeur [Champs Nom, Id 8, "Brulle"]
		valuesCurrentFiche = currentRecord.getValues();
		
		// Comment on va avoir besoin d'utiliser des boucles for pour visiter les valeurs, 
		// on recupere la taille une seule fois ici
		sizeValuesCurrentFiche = valuesCurrentFiche.size();

		// Recuperation de toutes les IdFields dans un String [Separation de chaque IdFied dans une List]
		idFields = qRCodeComponent.getParamValues().getStringValue("ybFields"); 
		array_idField = idFields.split(",");
		
		idQrCodeImgHtmlField = qRCodeComponent.getParamValues().getStringValue("ybQrCodeImgHtmlField");
		
		// Recuperation de la chaine de caracteres envoyee par le JS
		String typeOperation = paramsServlet.getStringValue("typeOperation");

		String varReturn = "";
		if(typeOperation.equals("QRCode_checkIfExist"))
		{
			for(int i = 0; i < sizeValuesCurrentFiche; i++)
			{
				if(valuesCurrentFiche.get(i).getField().getId().equals(idQrCodeImgHtmlField)) 
				{
					Value valueQrCodeImgHtml = valuesCurrentFiche.get(i);
					if(valueQrCodeImgHtml.getValue().equals(""))
					{
						varReturn = "QrCodeNotExist";
					}
					else
					{
						varReturn = valueQrCodeImgHtml.getValue();					
					}
				}
			}
		}
		else if(typeOperation.startsWith("QRCode_getInfos"))
		{
			String context = getYellowboxEntryPoint().get("CONTEXT");
			String full_url = typeOperation.split("\\|")[1]; // http://localhost:8080/
			String base_url = full_url.split()[0];
			infosFields = unaccent(GetQrCodeInfos());
			
        	String path = getYellowboxEntryPoint().getCheminDocjoint() +"QRCode";
        	String table_name = getYellowboxEntryPoint().getServices().getRecordService().getRecordFromId(idCurrentFiche).getTable().getName();
        	String file_name = table_name + "_" + idCurrentFiche;
        	String path_qrcode_image = path + "/" + file_name;
        	
	        try 
	        {		        	
	        	Files.createDirectories(Paths.get(path));
	            generateQRCodeImage(infosFields, 150, 150, path_qrcode_image);
	        } 
	        catch (WriterException e) 
	        {
	            System.out.println("Could not generate QR Code, WriterException :: " + e.getMessage());
	        } 
	        catch (IOException e) 
	        {
	            System.out.println("Could not generate QR Code, IOException :: " + e.getMessage());
	        }

			varReturn = "<img src='" + getYellowboxEntryPoint().get("CONTEXT") + "/servletrecuperefichier?document=/QRCode/"+ file_name + "&contenttype=image/png' alt='"+ infosFields +"'>";
		}
		else if(typeOperation.startsWith("QRCode_writeIntoYB"))
		{
			String imgHtml = typeOperation.split("\\|")[1];
			writeQRCodeInYb(imgHtml);
		}
		else
		{
			varReturn = "typeOperation ne repond a aucune condition";
		}
		return varReturn;
	}
	
	@Override
	public String getName() {
		return "QRCodeServlet";
	}
	
	// On recupere ici les informations de differents champs pour les transformer en QR Code
	public String GetQrCodeInfos()
	{
		String qrCodeContenu = "";		
		// Values YB : ID (9) / Name (LastName) / Valeur (Brulle)
		for(int i = 0; i < sizeValuesCurrentFiche; i++)
		{
			for(String idField : array_idField) // ID (9)  + ID (10) [ID CONTACT PRENOM , ID CONTACT NOM]
			{
				if(valuesCurrentFiche.get(i).getField().getId().equals(idField))
				{
					qrCodeContenu += valuesCurrentFiche.get(i).getField().getName();
					qrCodeContenu += " : " + valuesCurrentFiche.get(i).getValue() + " ";			
				}
			}
		}
		return qrCodeContenu;
	}
	
	// Inscription dans la base de donnees l'image au format HTML et le contenu des champs
	public void writeQRCodeInYb(String imgHtml)
	{	
		//Value [0] => Nom [id 8] 'Brulle'
		//Value [1] => Prenom [id 9] 'Julien'
		//Value [2] => ...
		for(int i = 0; i < sizeValuesCurrentFiche; i++)
		{
			// Je recherche ici le champs qui correspondent au champs IdQrCodeImgHtml
			if(valuesCurrentFiche.get(i).getField().getId().equals(idQrCodeImgHtmlField)) 
			{
				Value valueQRCodeImgHtml = valuesCurrentFiche.get(i);
				valueQRCodeImgHtml.setValue(imgHtml);
				valuesCurrentFiche.set(i, valueQRCodeImgHtml);
			}
		}
		currentRecord.setValues(valuesCurrentFiche);
		
		getYellowboxEntryPoint().getServices().getRecordService().createOrUpdate(currentRecord);
	}

	// Supprime les accents des champs recuperer : les QR Code n'acceptent pas les accents
	public static String unaccent(String src) 
	{
		return Normalizer
				.normalize(src, Normalizer.Form.NFD)
				.replaceAll("[^\\p{ASCII}]", "");
	}


	    private void generateQRCodeImage(String text, int width, int height, String filePath)
	            throws WriterException, IOException 
	    {
	        QRCodeWriter qrCodeWriter = new QRCodeWriter();
	        BitMatrix bitMatrix = qrCodeWriter.encode(text, BarcodeFormat.QR_CODE, width, height);

	        Path path = FileSystems.getDefault().getPath(filePath);
	        MatrixToImageWriter.writeToPath(bitMatrix, "PNG", path);
	    }
	
	/* FONCTIONS INUTILES AVEC zxing QrCode
	public String generateByteArrayQRCode(String data) throws WriterException, IOException
	{
        int size = 400;

        BitMatrix bitMatrix = generateMatrix(data, size);
		
		BufferedImage bImageQrCode = MatrixToImageWriter.toBufferedImage(bitMatrix);
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
	    
		ImageIO.write(bImageQrCode, "jpg", bos );
		
		byte[] byteArray = bos.toByteArray();
		int sizeByteArray = byteArray.length;
		int indexToFoget = sizeByteArray - 1;
		
		String stringByteArray= "[";
		for(int i = 0; i < sizeByteArray; i++)
		{
			stringByteArray += byteArray[i];
			if(i != indexToFoget)
			{
				stringByteArray += ",";
			}
		}
		stringByteArray += "]";
		
	    return stringByteArray;
	}

	private static BitMatrix generateMatrix(String data, int size) throws WriterException 
    {
        BitMatrix bitMatrix = new QRCodeWriter().encode(data, BarcodeFormat.QR_CODE, size, size);
        return bitMatrix;
    }
	*/
	
}

/* QR CODE ZXING (Luca)
 * import java.io.File;
import java.util.HashMap;
import java.util.Map;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

public class CreationQrCode {
    public static void main(String[] args) {
        try {
            String qrCodeData = "Violette est une carline";
            String filePath = "C:\\QRCODE\\test1.png";
            String charset = "UTF-8"; // or "ISO-8859-1"
            Map < EncodeHintType, ErrorCorrectionLevel > hintMap = new HashMap < EncodeHintType, ErrorCorrectionLevel > ();
            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
           
            // Avec les QR codes, on commence toujours avec une matrice :
            BitMatrix matrix = new MultiFormatWriter().encode(
            new String(qrCodeData.getBytes(charset), charset),
                BarcodeFormat.QR_CODE, 200, 200, hintMap);
            MatrixToImageWriter.writeToFile(matrix, filePath.substring(filePath
                .lastIndexOf('.') + 1), new File(filePath));
            System.out.println("Le creation du QR Code s'est deroulee correctement.");
        } catch (Exception e) {
            System.err.println(e);
        }
    }
}

 */

